@page "/"
@using Microsoft.JSInterop
@using System.Threading

<h3>SharpFarm ðŸŒ¾</h3>

<div class="controls">
    <label>Tick Speed (ms):</label>
    <input type="number" @bind="TickSpeed" min="100" max="2000" step="50" />
</div>

<div class="game-container">
    <div class="editor">
        <textarea @bind="UserCode"></textarea>
        <button @onclick="RunCode">Run</button>
        <div class="log">@Log</div>
    </div>

    <div class="grid">
        @for (int y = 0; y < World.Height; y++)
        {
            <div class="row">
                @for (int x = 0; x < World.Width; x++)
                {
                    var cell = World.Grid[x][y];
                    var droneHere = World.Drones.FirstOrDefault(d => d.X == x && d.Y == y);
                    string cls = cell.Type switch
                    {
                        CellType.Rock => "rock",
                        CellType.Water => "water",
                        _ => cell.IsPlanted ? "planted" : "empty"
                    };
                    if (droneHere != null) cls = "drone";
                    <div class="cell @cls"></div>
                }
            </div>
        }
    </div>
</div>

@code {
    string UserCode = @"world.SpawnDrone(2,2);
world.Drones[0].Move(""right"", world);
world.Drones[0].Plant(world);
";
    string Log = "";

    GameWorld World = new();
    ScriptRunner Runner;

    [Inject] private IJSRuntime JS { get; set; } = default!;

    // Tick timer
    private Timer? _timer;
    private int _tickSpeed = 500;
    public int TickSpeed
    {
        get => _tickSpeed;
        set
        {
            _tickSpeed = value;
            // restart timer with new interval
            _timer?.Change(0, _tickSpeed);
        }
    }

    protected override void OnInitialized()
    {
        Runner = new ScriptRunner(World);
        _timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, TickSpeed);
    }

    async Task RunCode()
    {
        Log = await Runner.RunAsync(UserCode);
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
